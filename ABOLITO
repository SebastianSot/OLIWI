#include <iostream> 
using namespace std;

// Estructura para cada miembro de la civilización
struct Nodo {
    int id;                  // ID único del miembro
    string nombre;           // Nombre del miembro
    char genero;           // Género del miembro
    int anioNacimiento;      // Año de nacimiento
    Nodo* izquierda;         // Puntero al hijo izquierdo
    Nodo* derecha;           // Puntero al hijo derecho
};


//PROTOTIPOS
void crearNodo();
void insertarNodo();
// Función para crear un nuevo nodo
Nodo* crearNodo(int id, string nombre, char genero, int anioNacimiento) {
    Nodo* nuevo = new Nodo;
    nuevo->id = id;
    nuevo->nombre = nombre;
    nuevo->genero = genero;
    nuevo->anioNacimiento = anioNacimiento;
    nuevo->izquierda = NULL;
    nuevo->derecha = NULL;
    return nuevo;
}

// Inserta un nodo en el ABB según el ID
void insertarNodo(Nodo* raiz, Nodo* nuevo) {
    if (raiz == NULL)
        return nuevo;

    if (nuevo->id < raiz->id)
        raiz->izquierda = insertar(raiz->izquierda, nuevo);
    else if (nuevo->id > raiz->id)
        raiz->derecha = insertar(raiz->derecha, nuevo);
    else
        cout << "ID duplicado. No se puede insertar.\n";

    return raiz;
}

// Buscar un miembro por ID
Nodo* buscarPorID(Nodo* raiz, int id) {
    if (raiz == NULL || raiz->id == id)
        return raiz;

    if (id < raiz->id)
        return buscarPorID(raiz->izquierda, id);
    else
        return buscarPorID(raiz->derecha, id);
}

// Buscar por nombre (recorrido en profundidad)
Nodo* buscarPorNombre(Nodo* raiz, string nombre) {
    if (raiz == NULL)
        return NULL;
    if (raiz->nombre == nombre)
        return raiz;

    Nodo* izq = buscarPorNombre(raiz->izquierda, nombre);
    if (izq != NULL) return izq;

    return buscarPorNombre(raiz->derecha, nombre);
}

// Mostrar ancestros desde la raíz hasta el nodo
bool mostrarAncestros(Nodo* raiz, int id) {
    if (raiz == NULL)
        return false;

    if (raiz->id == id)
        return true;

    if (mostrarAncestros(raiz->izquierda, id) || mostrarAncestros(raiz->derecha, id)) {
        cout << raiz->nombre << " -> ";
        return true;
    }

    return false;
}

// Mostrar descendientes en preorden (nodo, izq, der)
void mostrarDescendientes(Nodo* nodo) {
    if (nodo == NULL) return;

    cout << nodo->nombre << " (" << nodo->id << ")\n";
    mostrarDescendientes(nodo->izquierda);
    mostrarDescendientes(nodo->derecha);
}

// Buscar el nodo mínimo (usado al eliminar nodos con 2 hijos)
Nodo* minimo(Nodo* nodo) {
    while (nodo->izquierda != NULL)
        nodo = nodo->izquierda;
    return nodo;
}

// Eliminar un nodo del ABB
Nodo* eliminar(Nodo* raiz, int id) {
    if (raiz == NULL) return NULL;

    if (id < raiz->id)
        raiz->izquierda = eliminar(raiz->izquierda, id);
    else if (id > raiz->id)
        raiz->derecha = eliminar(raiz->derecha, id);
    else {
        // Nodo con un hijo o sin hijos
        if (raiz->izquierda == NULL) {
            Nodo* temp = raiz->derecha;
            delete raiz;
            return temp;
        }
        else if (raiz->derecha == NULL) {
            Nodo* temp = raiz->izquierda;
            delete raiz;
            return temp;
        }

        // Nodo con dos hijos: se reemplaza por su sucesor
        Nodo* temp = minimo(raiz->derecha);
        raiz->id = temp->id;
        raiz->nombre = temp->nombre;
        raiz->genero = temp->genero;
        raiz->anioNacimiento = temp->anioNacimiento;
        raiz->derecha = eliminar(raiz->derecha, temp->id);
    }
    return raiz;
}

// Recorridos del árbol
void inorden(Nodo* raiz) {
    if (raiz != NULL) {
        inorden(raiz->izquierda);
        cout << raiz->nombre << " (" << raiz->id << ")\n";
        inorden(raiz->derecha);
    }
}

void preorden(Nodo* raiz) {
    if (raiz != NULL) {
        cout << raiz->nombre << " (" << raiz->id << ")\n";
        preorden(raiz->izquierda);
        preorden(raiz->derecha);
    }
}

void postorden(Nodo* raiz) {
    if (raiz != NULL) {
        postorden(raiz->izquierda);
        postorden(raiz->derecha);
        cout << raiz->nombre << " (" << raiz->id << ")\n";
    }
}

// Verifica si un nodo A es ancestro de B
bool esAncestro(Nodo* raiz, int a, int b) {
    Nodo* nodoA = buscarPorID(raiz, a);
    if (nodoA == NULL) return false;

    return buscarPorID(nodoA, b) != NULL;
}

// Verifica si un nodo A es descendiente de B
bool esDescendiente(Nodo* raiz, int a, int b) {
    Nodo* nodoB = buscarPorID(raiz, b);
    if (nodoB == NULL) return false;

    return buscarPorID(nodoB, a) != NULL;
}

int main() {
    Nodo* raiz = NULL;
    int opcion;

    do {
        cout << "\n--- MENU ---\n";
        cout << "1. Insertar miembro\n";
        cout << "2. Buscar miembro\n";
        cout << "3. Mostrar ancestros\n";
        cout << "4. Mostrar descendientes\n";
        cout << "5. Eliminar miembro\n";
        cout << "6. Mostrar arbol completo\n";
        cout << "7. Verificar relacion\n";
        cout << "0. Salir\n";
        cout << "Opcion: ";
        cin >> opcion;

        if (opcion == 1) {
            int id, anio;
            string nombre, genero;
            cout << "ID: "; cin >> id;
            cin.ignore();
            cout << "Nombre: "; getline(cin, nombre);
            cout << "Genero: "; getline(cin, genero);
            cout << "Anio de nacimiento: "; cin >> anio;

            Nodo* nuevo = crearNodo(id, nombre, genero, anio);
            raiz = insertar(raiz, nuevo);
        }

        else if (opcion == 2) {
            int id;
            cout << "ID a buscar: ";
            cin >> id;
            Nodo* encontrado = buscarPorID(raiz, id);
            if (encontrado)
                cout << "Nombre: " << encontrado->nombre << ", Genero: " << encontrado->genero << ", Nacimiento: " << encontrado->anioNacimiento << endl;
            else
                cout << "No encontrado.\n";
        }

        else if (opcion == 3) {
            int id;
            cout << "ID del miembro: ";
            cin >> id;
            if (!mostrarAncestros(raiz, id))
                cout << "No se encontraron ancestros o ID no existe.\n";
            else
                cout << "(Fin)\n";
        }

        else if (opcion == 4) {
            int id;
            cout << "ID del miembro: ";
            cin >> id;
            Nodo* nodo = buscarPorID(raiz, id);
            if (nodo)
                mostrarDescendientes(nodo);
            else
                cout << "Miembro no encontrado.\n";
        }

        else if (opcion == 5) {
            int id;
            cout << "ID a eliminar: ";
            cin >> id;
            raiz = eliminar(raiz, id);
        }

        else if (opcion == 6) {
            int tipo;
            cout << "1. Inorden\n2. Preorden\n3. Postorden\nElegir tipo: ";
            cin >> tipo;
            if (tipo == 1) inorden(raiz);
            else if (tipo == 2) preorden(raiz);
            else if (tipo == 3) postorden(raiz);
            else cout << "Tipo invalido.\n";
        }

        else if (opcion == 7) {
            int a, b;
            cout << "ID del primer miembro: "; cin >> a;
            cout << "ID del segundo miembro: "; cin >> b;

            if (esAncestro(raiz, a, b))
                cout << a << " es ancestro de " << b << endl;
            else if (esDescendiente(raiz, a, b))
                cout << a << " es descendiente de " << b << endl;
            else
                cout << "No hay relacion directa.\n";
        }

    } while (opcion != 0);

    return 0;
}

